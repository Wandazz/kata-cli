/**
 * Zaun
 * Zaun service 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Bot', 'model/Conversation', 'model/InlineResponse200', 'model/PagedBot'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Bot'), require('../model/Conversation'), require('../model/InlineResponse200'), require('../model/PagedBot'));
  } else {
    // Browser globals (root is window)
    if (!root.Zaun) {
      root.Zaun = {};
    }
    root.Zaun.BotApi = factory(root.Zaun.ApiClient, root.Zaun.Bot, root.Zaun.Conversation, root.Zaun.InlineResponse200, root.Zaun.PagedBot);
  }
}(this, function(ApiClient, Bot, Conversation, InlineResponse200, PagedBot) {
  'use strict';

  /**
   * Bot service.
   * @module api/BotApi
   * @version 1.0.0
   */

  /**
   * Constructs a new BotApi. 
   * @alias module:api/BotApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the botsBotIdConversePost operation.
     * @callback module:api/BotApi~botsBotIdConversePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Converse
     * @param {String} botId ID of bot
     * @param {module:model/Conversation} body Conversation object
     * @param {module:api/BotApi~botsBotIdConversePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.botsBotIdConversePost = function(botId, body, callback) {
      var postBody = body;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdConversePost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsBotIdConversePost");
      }


      var pathParams = {
        'botId': botId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bots/{botId}/converse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdDelete operation.
     * @callback module:api/BotApi~botsBotIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete bot by ID
     * @param {String} botId ID of bot to delete
     * @param {module:api/BotApi~botsBotIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    this.botsBotIdDelete = function(botId, callback) {
      var postBody = null;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdDelete");
      }


      var pathParams = {
        'botId': botId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bot;

      return this.apiClient.callApi(
        '/bots/{botId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdExecObjectPost operation.
     * @callback module:api/BotApi~botsBotIdExecObjectPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute intent, state mapper, action, or
     * @param {String} botId ID of bot
     * @param {module:model/String} _object Object
     * @param {Object} body Exec body
     * @param {module:api/BotApi~botsBotIdExecObjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.botsBotIdExecObjectPost = function(botId, _object, body, callback) {
      var postBody = body;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdExecObjectPost");
      }

      // verify the required parameter '_object' is set
      if (_object == undefined || _object == null) {
        throw new Error("Missing the required parameter '_object' when calling botsBotIdExecObjectPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsBotIdExecObjectPost");
      }


      var pathParams = {
        'botId': botId,
        'object': _object
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bots/{botId}/exec/{object}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdGet operation.
     * @callback module:api/BotApi~botsBotIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find bot by ID
     * @param {String} botId ID of bot to return
     * @param {module:api/BotApi~botsBotIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    this.botsBotIdGet = function(botId, callback) {
      var postBody = null;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdGet");
      }


      var pathParams = {
        'botId': botId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bot;

      return this.apiClient.callApi(
        '/bots/{botId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdPut operation.
     * @callback module:api/BotApi~botsBotIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update bot by ID
     * @param {String} botId ID of bot to update
     * @param {module:model/Bot} body Bot
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.increment Increment version number
     * @param {module:api/BotApi~botsBotIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    this.botsBotIdPut = function(botId, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdPut");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsBotIdPut");
      }


      var pathParams = {
        'botId': botId
      };
      var queryParams = {
        'increment': opts['increment']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bot;

      return this.apiClient.callApi(
        '/bots/{botId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdVersionsGet operation.
     * @callback module:api/BotApi~botsBotIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bot versions
     * @param {String} botId ID of bot
     * @param {module:api/BotApi~botsBotIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.botsBotIdVersionsGet = function(botId, callback) {
      var postBody = null;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdVersionsGet");
      }


      var pathParams = {
        'botId': botId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/bots/{botId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsGet operation.
     * @callback module:api/BotApi~botsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedBot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bots
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit returned bots in a page
     * @param {Number} opts.page A number representing page
     * @param {module:api/BotApi~botsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedBot}
     */
    this.botsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PagedBot;

      return this.apiClient.callApi(
        '/bots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsPost operation.
     * @callback module:api/BotApi~botsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create bot
     * @param {module:model/Bot} body Bot
     * @param {module:api/BotApi~botsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bot}
     */
    this.botsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bot;

      return this.apiClient.callApi(
        '/bots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/**
 * Zaun
 * Zaun service 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2005', 'model/Team'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2005'), require('../model/Team'));
  } else {
    // Browser globals (root is window)
    if (!root.Zaun) {
      root.Zaun = {};
    }
    root.Zaun.TeamApi = factory(root.Zaun.ApiClient, root.Zaun.InlineResponse2005, root.Zaun.Team);
  }
}(this, function(ApiClient, InlineResponse2005, Team) {
  'use strict';

  /**
   * Team service.
   * @module api/TeamApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TeamApi. 
   * @alias module:api/TeamApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teamsPost operation.
     * @callback module:api/TeamApi~teamsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a team
     * @param {module:model/Team} body Team object
     * @param {module:api/TeamApi~teamsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.teamsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling teamsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdUsersGet operation.
     * @callback module:api/TeamApi~teamsTeamIdUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users in a team
     * @param {String} teamId ID of team to return
     * @param {module:api/TeamApi~teamsTeamIdUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.teamsTeamIdUsersGet = function(teamId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdUsersGet");
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/teams/{teamId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdUsersPost operation.
     * @callback module:api/TeamApi~teamsTeamIdUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to team
     * @param {String} teamId Team ID
     * @param {String} userId User ID
     * @param {String} roleId Role ID
     * @param {module:api/TeamApi~teamsTeamIdUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.teamsTeamIdUsersPost = function(teamId, userId, roleId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdUsersPost");
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling teamsTeamIdUsersPost");
      }

      // verify the required parameter 'roleId' is set
      if (roleId == undefined || roleId == null) {
        throw new Error("Missing the required parameter 'roleId' when calling teamsTeamIdUsersPost");
      }


      var pathParams = {
        'teamId': teamId
      };
      var queryParams = {
        'userId': userId,
        'roleId': roleId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/teams/{teamId}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsTeamIdUsersUserIdDelete operation.
     * @callback module:api/TeamApi~teamsTeamIdUsersUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user from team
     * @param {String} teamId Team ID
     * @param {String} userId User ID
     * @param {module:api/TeamApi~teamsTeamIdUsersUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.teamsTeamIdUsersUserIdDelete = function(teamId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId == undefined || teamId == null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsTeamIdUsersUserIdDelete");
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling teamsTeamIdUsersUserIdDelete");
      }


      var pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/teams/{teamId}/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

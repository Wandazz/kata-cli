/**
 * Zaun
 * Zaun service 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Session'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Session'));
  } else {
    // Browser globals (root is window)
    if (!root.Zaun) {
      root.Zaun = {};
    }
    root.Zaun.SessionApi = factory(root.Zaun.ApiClient, root.Zaun.Session);
  }
}(this, function(ApiClient, Session) {
  'use strict';

  /**
   * Session service.
   * @module api/SessionApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SessionApi. 
   * @alias module:api/SessionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the botsBotIdDeploymentsDepIdSessionsPost operation.
     * @callback module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create session for bot deployment
     * @param {String} botId ID of bot
     * @param {String} depId ID of deployment
     * @param {module:model/Session} body Session
     * @param {module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.botsBotIdDeploymentsDepIdSessionsPost = function(botId, depId, body, callback) {
      var postBody = body;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdDeploymentsDepIdSessionsPost");
      }

      // verify the required parameter 'depId' is set
      if (depId == undefined || depId == null) {
        throw new Error("Missing the required parameter 'depId' when calling botsBotIdDeploymentsDepIdSessionsPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsBotIdDeploymentsDepIdSessionsPost");
      }


      var pathParams = {
        'botId': botId,
        'depId': depId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/bots/{botId}/deployments/{depId}/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdDeploymentsDepIdSessionsSessionIdDelete operation.
     * @callback module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete session by ID
     * @param {String} botId ID of bot
     * @param {String} depId ID of deployment to update
     * @param {String} sessionId ID of session to delete
     * @param {module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.botsBotIdDeploymentsDepIdSessionsSessionIdDelete = function(botId, depId, sessionId, callback) {
      var postBody = null;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdDelete");
      }

      // verify the required parameter 'depId' is set
      if (depId == undefined || depId == null) {
        throw new Error("Missing the required parameter 'depId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdDelete");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId == undefined || sessionId == null) {
        throw new Error("Missing the required parameter 'sessionId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdDelete");
      }


      var pathParams = {
        'botId': botId,
        'depId': depId,
        'sessionId': sessionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/bots/{botId}/deployments/{depId}/sessions/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdDeploymentsDepIdSessionsSessionIdGet operation.
     * @callback module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find session by ID
     * @param {String} botId ID of bot
     * @param {String} depId ID of deployment to update
     * @param {String} sessionId ID of session to return
     * @param {String} mode get mode
     * @param {module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    this.botsBotIdDeploymentsDepIdSessionsSessionIdGet = function(botId, depId, sessionId, mode, callback) {
      var postBody = null;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdGet");
      }

      // verify the required parameter 'depId' is set
      if (depId == undefined || depId == null) {
        throw new Error("Missing the required parameter 'depId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdGet");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId == undefined || sessionId == null) {
        throw new Error("Missing the required parameter 'sessionId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdGet");
      }

      // verify the required parameter 'mode' is set
      if (mode == undefined || mode == null) {
        throw new Error("Missing the required parameter 'mode' when calling botsBotIdDeploymentsDepIdSessionsSessionIdGet");
      }


      var pathParams = {
        'botId': botId,
        'depId': depId,
        'sessionId': sessionId
      };
      var queryParams = {
        'mode': mode
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Session;

      return this.apiClient.callApi(
        '/bots/{botId}/deployments/{depId}/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the botsBotIdDeploymentsDepIdSessionsSessionIdPut operation.
     * @callback module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update session by ID
     * @param {String} botId ID of bot
     * @param {String} depId ID of deployment to update
     * @param {String} sessionId ID of session to update
     * @param {module:model/Session} body Session
     * @param {module:api/SessionApi~botsBotIdDeploymentsDepIdSessionsSessionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.botsBotIdDeploymentsDepIdSessionsSessionIdPut = function(botId, depId, sessionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'botId' is set
      if (botId == undefined || botId == null) {
        throw new Error("Missing the required parameter 'botId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdPut");
      }

      // verify the required parameter 'depId' is set
      if (depId == undefined || depId == null) {
        throw new Error("Missing the required parameter 'depId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdPut");
      }

      // verify the required parameter 'sessionId' is set
      if (sessionId == undefined || sessionId == null) {
        throw new Error("Missing the required parameter 'sessionId' when calling botsBotIdDeploymentsDepIdSessionsSessionIdPut");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling botsBotIdDeploymentsDepIdSessionsSessionIdPut");
      }


      var pathParams = {
        'botId': botId,
        'depId': depId,
        'sessionId': sessionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/bots/{botId}/deployments/{depId}/sessions/{sessionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
